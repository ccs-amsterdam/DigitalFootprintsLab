{"version":3,"sources":["components/routing/HeaderMenu.js","components/explore/dashboardData/useDomainInfo.js","apis/db.js","images/background.jpeg","components/routing/Welcome.js","components/routing/AuthRoute.js","images/logo.png","components/home/CardTemplate.js","components/home/GatherCard.js","images/googleTakeout1.gif","images/googleTakeout2.gif","util/tokenize.js","actions/index.js","components/gather/GatherGoogleTakeout.js","components/home/GatherCardColumn.js","components/home/ExploreCard.js","components/home/ExploreCardColumn.js","components/home/DataSquare.js","components/explore/dashboards/dashboardParts/ColoredBackgroundGrid.js","components/explore/dashboards/dashboardParts/ConfirmDeleteModal.js","components/explore/dashboards/dashboardParts/DataTable.js","components/explore/dashboards/dashboardParts/QueryInput.js","util/intersect.js","components/explore/dashboardData/DashboardData.js","components/explore/dashboardData/useDashboardData.js","components/explore/dashboards/DashboardTemplate.js","components/explore/dashboards/dashboardParts/KeyCloud.js","components/explore/dashboards/dashboardParts/BubbleChartSpec.js","components/explore/dashboards/dashboardParts/BubbleChart.js","components/explore/BrowsingHistory.js","components/explore/YoutubeHistory.js","components/explore/SearchHistory.js","App.js","reducers/index.js","index.js"],"names":["withRouter","items","children","location","useLocation","menuItems","map","item","index","Menu","Item","as","Link","to","path","header","disabled","active","pathname","label","Sidebar","Pushable","inverted","animation","visible","direction","size","Pusher","updateDomainInfo","domains","a","db","getDomainInfo","cache","domainsToFetch","filter","domain","retry","length","logo64","fetchData","data","Object","entries","key","value","generateToken","token","body","urls","fetch","method","headers","JSON","stringify","response","json","empty","reduce","obj","message","concat","join","msgBuffer","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","b","toString","padStart","this","idb","Dexie","version","stores","meta","dataStatus","domainInfo","delete","isWelcome","add","welcome","get","name","fields","deleted","d","i","put","f","_INDEX","where","equals","modify","source","idFields","getData","fulldata","newDomains","existing","id","push","updateDataStatus","addDomainInfo","keys","datastatus","current","date","Date","status","anyOf","toArray","table","row","url","info","bulkPut","then","catch","BulkError","e","console","log","Welcome","history","useHistory","beWelcomed","checkWelcome","useEffect","Grid","textAlign","style","height","backgroundImage","background","backgroundSize","verticalAlign","Column","maxWidth","Segment","border","Header","align","Button","primary","onClick","AuthRoute","Component","componentProps","useState","loading","setLoading","hasdb","setHasdb","connect","render","props","process","CardTemplate","subname","icon","done","Card","centered","cursor","width","marginLeft","marginRight","position","Dimmer","Loader","Icon","color","top","left","Content","float","content","replace","Meta","Description","statusMessage","produced","List","GatherCard","produces","statuses","useSelector","state","p","find","s","STOPWORDS_LOOKUP","sw","tokenize","text","split","toLowerCase","setDataStatus","type","dispatch","getState","newDataStatus","findIndex","WriteToDB","setOpen","useDispatch","ref","useRef","onChangeHandler","failed","newZip","JSZip","fileblob","target","files","loadAsync","zipped","file","async","chrome","parse","writeChromeHistory","youtube","parseYoutubeHtml","writeYoutubeHistory","click","hidden","onChange","accept","string","nodes","DOMParser","parseFromString","querySelector","querySelectorAll","node","aList","subtitles","textContent","attributes","href","titleUrl","title","br","datestring","nextSibling","time","toISOString","queries","URL","hostname","query","trim","words","word","convertTimestamp","time_usec","browser","page_transition","addData","channel","channel_url","Math","round","GatherGoogleTakeout","open","Modal","onClose","onOpen","trigger","rel","stackable","Container","ordered","marginTop","marginBottom","padding","src","gt1","alt","gt2","Actions","GoogleTakeout","GatherCardColumn","oldTime","currentTime","onDate","slice","ExploreCard","Browsing","Search","Youtube","ExploreCardColumn","headerStyle","fontSize","paddingBottom","paddingTop","columnStyle","cardGroupStyle","DeleteDataButton","button","margin","Popup","on","negative","fluid","destroyEverything","window","reload","DataSquare","ds","logo","divided","Row","Group","ColoredBackgroundGrid","zIndex","bottom","right","overflow","ConfirmDeleteModal","dashData","deleteIds","setDeleteIds","ask","setAsk","handleDelete","rmID","n","backgroundColor","ButtonGroup","Checkbox","React","memo","DataTable","columns","selection","setN","setData","selectionN","setSelectionN","N","listData","onBottomVisible","paddingLeft","Visibility","continuous","ScrollingTable","Table","unstackable","fixed","singleLine","cells","column","HeaderCell","createHeader","rows","processContent","Cell","Body","createBody","QueryInput","searchOn","setSelection","search","setSearch","searching","setSearching","timer","setTimeout","clearTimeout","display","class","flex","Input","compact","anyDone","arrays","cursors","allEqual","allMax","max","intersect","array","fill","res","DashboardData","indices","setDeleted","triggerUpdate","isArray","regexes","q","RegExp","searchIn","field_loop","field","regex","test","values","_DELETED","value_loop","filterFunction","counts","list","createDashData","DashboardTemplate","dataName","VisComponent","calcStatistics","useDashboardData","statistics","setStatistics","altSelection","setAltSelection","querySelection","setQuerySelection","inSelection","setOutSelection","Statistics","borderRadius","statistic","BackButton","wordcloudOptions","rotations","enableOptimizations","enableTooltip","deterministic","fontFamily","fontSizes","transitionDuration","colors","KeyCloud","nWords","Set","setKeys","setWords","count","countsArray","sort","ignore","searchValues","getSelection","callbacks","useCallback","onWordClick","old","newkeys","has","getWordColor","boxShadow","minWidth","minSize","undefined","options","toUpperCase","fontStyle","Dropdown","multiple","clearable","minHeight","createClassFromSpec","spec","$schema","autosize","resize","transform","expr","parentKey","signal","signals","events","update","force","scales","range","scheme","marks","enter","shape","scale","tooltip","x","y","stroke","strokeWidth","hover","BubbleChart","tree","selectedDatum","setSelectedDatum","setFilteredDatum","setDomains","useDomainInfo","createTreeData","filterSelectedDatum","deleteSelectedDatum","signalListeners","datum","popupStyle","BubbleChartSpec","actions","Image","floated","basic","category","extra","className","categories","parent","FIELD","SEARCHON","COLUMNS","stats","App","basename","exact","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document"],"mappings":"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","file":"static/js/main.7791745d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu, Sidebar } from \"semantic-ui-react\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\n\nconst HeaderMenu = ({ items, children }) => {\n  // This header menu is super sneaky.\n  // It's actually not meant to be seen.\n  // But it's nice to be able to turn it on (set visible to true) when developing\n  // (and it now handles the routing)\n\n  const location = useLocation();\n\n  const menuItems = items.map((item, index) => {\n    return (\n      <Menu.Item\n        key={\"item-\" + index}\n        index={index}\n        as={Link}\n        to={item.path}\n        header={index === 0}\n        disabled={false}\n        active={item.path === location.pathname}\n      >\n        {item.label}\n      </Menu.Item>\n    );\n  });\n\n  return (\n    <Sidebar.Pushable>\n      <Sidebar as={Menu} inverted animation=\"push\" visible={false} direction={\"top\"} size=\"mini\">\n        {menuItems}\n      </Sidebar>\n      <Sidebar.Pusher>{children}</Sidebar.Pusher>\n    </Sidebar.Pushable>\n  );\n};\n\nexport default withRouter(HeaderMenu);\n","import db from \"apis/db\";\nimport { useState, useEffect } from \"react\";\n\n/**\n * Get domain info for given dashData instance.\n * assumes dashData.data.columns exists\n * @param {*} dashData\n * @returns\n */\nexport default function useDomainInfo(dashData) {\n  const [data, setData] = useState([]);\n  const [domains, setDomains] = useState(null);\n\n  useEffect(() => {\n    if (!dashData?.data) return;\n    const domains = {};\n    for (let d of dashData.data) if (d?.domain && !domains[d.domain]) domains[d.domain] = true;\n    setDomains(Object.keys(domains));\n  }, [dashData?.data]);\n\n  useEffect(() => {\n    if (!domains || domains.length === 0) return;\n    const fetchData = async () => {\n      const data = await updateDomainInfo(domains);\n      setData(data);\n    };\n\n    fetchData();\n  }, [domains]);\n\n  return data;\n}\n\nexport const updateDomainInfo = async (domains) => {\n  let cache = await db.getDomainInfo(domains);\n\n  // Check which domains are in the cache\n  const domainsToFetch = domains.filter((domain) => !cache[domain] || !cache[domain].retry);\n\n  if (domainsToFetch.length === 0) {\n    return cache;\n  }\n\n  // Create empty entries in cache to prevent refetching if domain is not available in service\n  // If retrying, do keep logo64\n  for (let domain of domainsToFetch) {\n    cache[domain] = cache?.[domain]?.logo64 ? { logo64: cache[domain].logo64 } : {};\n  }\n\n  const data = await fetchData(domainsToFetch);\n\n  // add base64 encoding of logos\n  // const test = Object.keys(data).reduce((obj, d, i) => {\n  //   if (i > 10) return obj;\n  //   obj[d] = data[d];\n  //   return obj;\n  // }, {});\n  // addLogo64(test);\n  // console.log(test);\n\n  // Store results and return results including cached\n  //db.addDomainInfo(data);\n\n  for (const [key, value] of Object.entries(data)) {\n    cache[key] = value;\n  }\n\n  return cache;\n};\n\nconst fetchData = async (domainsToFetch) => {\n  // try fetching data from amcat. If failed, return empty data with .retry = true to trigger\n  // retry on next call\n  try {\n    const token = await generateToken(\"1234\", domainsToFetch);\n    const body = {\n      token,\n      urls: domainsToFetch,\n    };\n\n    // Make request\n    const response = await fetch(\"https://dd.amcat.nl\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n    const data = await response.json();\n    return data;\n  } catch (e) {\n    const empty = domainsToFetch.reduce((obj, domain) => {\n      obj[domain] = { retry: true };\n      return obj;\n    }, {});\n    return empty;\n  }\n};\n\nconst generateToken = async (key, urls) => {\n  var message = [key].concat(urls).join(\"|\");\n  const msgBuffer = new TextEncoder().encode(message);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n};\n\nconst addLogo64 = async (data) => {\n  for (let domain of Object.keys(data)) {\n    if (data[domain].logo64) continue;\n\n    const logoUrl = data[domain].logo || `http://${domain}`;\n    let googlefav = `http://t1.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=${logoUrl}&size=128`;\n\n    // just for dev. Note that you have to visit this proxy website to enable it\n    // if (window.location.host === \"localhost:3000\")\n    //   googlefav = \"https://cors-anywhere.herokuapp.com/\" + googlefav;\n    console.log(googlefav);\n    data[domain].logo64 = await toDataURL(googlefav);\n  }\n};\n\nconst toDataURL = (url) => {\n  // https://stackoverflow.com/a/20285053\n  fetch(url, { mode: \"no-cors\" })\n    .then((response) => response.blob())\n    .then(\n      (blob) =>\n        new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onloadend = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        })\n    );\n};\n","import { updateDomainInfo } from \"components/explore/dashboardData/useDomainInfo\";\nimport Dexie from \"dexie\";\n\n// Simplified alternative to previous use of indexedDB, motivated by:\n// - less dependencies\n// - avoiding dexie live hooks, which might not be supported on all devices\n// - we will now read full data (in a specific visualization) in memory anyway, so indexing is just a waste of time\n// - without indexing we can also encrypt entries. For instance linked to encryption keys in temporary cookies\n// - DB data type agnostic (not using different tables for types. components can figure that stuff out)\n\nclass FootprintDB {\n  constructor() {\n    // Dexie automatically checks whether a db with this name exists. If it does,\n    // it opens the existing one, if it doesn't, it creates a new one.\n    this.idb = new Dexie(\"FootprintDB\"); // idb = indexedDB\n\n    // the following 2 lines are only for developing\n    // if enabled (i.e. not commented), the db resets every time the app is started (also when refreshing)\n    // this.idb.delete();\n    // this.idb = new Dexie(\"FootprintDB\");\n\n    this.idb.version(2).stores({\n      meta: \"welcome\", // this just serves to keep track of whether db was 'created' via the welcome component. Eventually,\n      //  this would be a good place to add authentication / token validation\n      dataStatus: \"&name, source, status, date\",\n      data: \"&name, deleted\", // unindexed fields: \"data\". \"data\" is an array with all the data. \"deleted\" requires some explanation.\n      // data items can be deleted by users, but for speed we don't overwrite the data immediately,\n      // and instead store the indices values of the deleted items. The format is a boolean array of same length as data\n      domainInfo: \"&domain\", // unindexed: info\n    });\n  }\n\n  async destroyEverything() {\n    // reset database\n    await this.idb.delete();\n  }\n\n  // META\n  /** just serves to indicate that user has accepted conditions at welcome screen */\n  async welcome() {\n    if (!(await this.isWelcome())) this.idb.meta.add({ welcome: 1 });\n    return null;\n  }\n  async isWelcome() {\n    return this.idb.meta.get(1);\n  }\n\n  /////// DATA\n\n  async getData(name, fields) {\n    try {\n      let data = await this.idb.data.get({ name });\n      // For speed and efficiency, data items are not immediately deleted from the database when they are removed\n      // in the client but a lookup object for deleted indices is used (see note above in the IDB table declaration).\n      if (data?.deleted) {\n        data.data = data.data.filter((d, i) => !data.deleted[i]);\n        await this.idb.data.put({ name, deleted: null, data: data.data }, [name]);\n      }\n\n      if (fields) {\n        for (let i = 0; i < data.data.length; i++) {\n          const item = {};\n          for (let f of fields) item[f] = data.data[i][f];\n          data.data[i] = item;\n        }\n      }\n\n      for (let i = 0; i < data.data.length; i++) data.data[i]._INDEX = i;\n      return data.data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async setDeleted(name, deleted) {\n    await this.idb.data.where(\"name\").equals(name).modify({ deleted });\n  }\n\n  // add data given name of data type (e.g., Browsing). idFields is an array of fields in data objects used to check for duplicates.\n  // e.g. ['url','date']\n  async addData(data, name, source, idFields = null) {\n    let fulldata = await this.getData(name);\n\n    const newDomains = {}; // also check for new domains, to immediately call backend for getting domaininfo\n    if (fulldata && fulldata.data.length > 0) {\n      const existing = {};\n      if (idFields) {\n        for (let d of data) {\n          if (d.domain && !newDomains[d.domain]) newDomains[d.domain] = true;\n          const id = JSON.stringify(idFields.map((f) => d[f]));\n          existing[id] = true;\n        }\n      }\n      for (let d of fulldata.data) {\n        if (d.domain && newDomains[d.domain]) newDomains[d.domain] = false;\n        if (idFields) {\n          const id = JSON.stringify(idFields.map((f) => d[f]));\n          if (existing[id]) continue;\n        }\n        data.push(d);\n      }\n    }\n\n    await this.idb.data.put({ name, deleted: null, data }, [name]);\n    await this.updateDataStatus(name, source);\n\n    const addDomainInfo = Object.keys(newDomains).filter((domain) => newDomains[domain]);\n    if (addDomainInfo.length > 0) updateDomainInfo(addDomainInfo);\n  }\n\n  /////// DATA STATUS\n\n  async getDataStatus(name) {\n    return this.idb.datastatus.get({ name });\n  }\n\n  async updateDataStatus(name, source) {\n    // note that status is always set to finished.\n    // whenever the datastatus table is updated, it its written to the dataStatus state (redux)\n    // This way the 'loading' status can be triggered via dispatch, and is set to finished when the update is finished\n    const current = await this.idb.dataStatus.get({ name });\n    const date = new Date();\n    if (current) {\n      this.idb.dataStatus.where(\"name\").equals(name).modify({ date, source, status: \"finished\" });\n    } else {\n      this.idb.dataStatus.add({ name, date, source, status: \"finished\" });\n    }\n  }\n\n  /////// DOMAIN INFO\n\n  async getDomainInfo(domains) {\n    // returns an object where keys are domains and values are info\n    const table = await this.idb.domainInfo.where(\"domain\").anyOf(domains).toArray();\n    return table.reduce((obj, row) => {\n      obj[row.url] = row.info;\n      return obj;\n    }, {});\n  }\n\n  async addDomainInfo(domainInfo) {\n    const data = Object.keys(domainInfo).map((key) => ({ domain: key, info: domainInfo[key] }));\n    this.idb.domainInfo\n      .bulkPut(data)\n      .then()\n      .catch(Dexie.BulkError, (e) => {\n        console.log(\"ignored some duplicates in writeDomainInfo\");\n      });\n  }\n}\n\nconst db = new FootprintDB();\nexport default db;\n","export default __webpack_public_path__ + \"static/media/background.eb5e36bf.jpeg\";","import React, { useEffect } from \"react\";\n\nimport db from \"apis/db\";\nimport { useHistory } from \"react-router-dom\";\nimport { Grid, Button, Header, Segment } from \"semantic-ui-react\";\nimport background from \"images/background.jpeg\";\n\n/**\n * This component only appears the first time users visit,\n * or if they are away so long that the indexedDB has been cleaned.\n * In time, this page should clearly list the terms and conditions.\n */\nconst Welcome = ({ items }) => {\n  const history = useHistory();\n\n  const beWelcomed = async (checkWelcome) => {\n    if (checkWelcome) {\n      const iswelcome = await db.isWelcome();\n      if (!iswelcome) return null;\n    }\n    try {\n      await db.welcome();\n      history.push(items[0].path);\n    } catch (e) {}\n  };\n\n  useEffect(() => {\n    beWelcomed(true);\n  });\n\n  return (\n    <Grid\n      inverted\n      textAlign=\"center\"\n      style={{\n        height: \"100vh\",\n        backgroundImage: `url(${background})`,\n        backgroundSize: \"100% 100%\",\n      }}\n      verticalAlign=\"middle\"\n    >\n      <Grid.Column style={{ maxWidth: 600 }}>\n        <Segment style={{ border: 0 }}>\n          <Header as=\"h2\">Welcome to the Digital Footprints Lab!</Header>\n          <p align=\"justified\">\n            This application let's you collect and explore your own digital traces. All the data is\n            stored and processed on your own device, and cannot be seen by anyone, so that you are\n            free to contemplate your life choices in solitude.\n          </p>\n          <p align=\"justified\">\n            We do, however, kindly ask you to anonymously donate some parts of this data for\n            scientific research. Specifically, we are interested in how you seek, consume and share\n            news articles. The data will be used for non-commercial research by a select group of\n            researchers at Dutch Universities.\n          </p>\n          <Button primary onClick={() => beWelcomed(false)}>\n            Great, let's get started!\n          </Button>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Welcome;\n","import React, { useState } from \"react\";\nimport { Route, Redirect } from \"react-router\";\nimport db from \"apis/db\";\n\n/**\n * Handles authentication (which at the moment is just accepting the welcome message)\n * Redirects to the welcome pages if the condition in connect is not met.\n */\nconst AuthRoute = ({ Component, ...componentProps }) => {\n  const [loading, setLoading] = useState(true);\n  const [hasdb, setHasdb] = useState(false);\n  // the weird trick for passing on componentProps is basically\n  // redundant with Redux, but leaving it intact just in case\n\n  const connect = async () => {\n    if (await db.isWelcome()) {\n      setHasdb(true);\n    } else {\n      setHasdb(false);\n    }\n    setLoading(false);\n  };\n\n  connect();\n\n  return (\n    <Route\n      {...componentProps}\n      render={(props) =>\n        loading ? (\n          <div>loading...</div>\n        ) : hasdb ? (\n          <Component {...componentProps} {...props} />\n        ) : (\n          <Redirect to={`${process.env.PUBLIC_URL}/`} />\n        )\n      }\n    />\n  );\n};\n\nexport default AuthRoute;\n","export default __webpack_public_path__ + \"static/media/logo.fc0d5b24.png\";","import React from \"react\";\nimport { Card, Dimmer, Icon, Loader } from \"semantic-ui-react\";\n\nconst CardTemplate = ({ children, name, subname, icon, onClick, loading, done }) => {\n  return (\n    <Card\n      centered\n      style={{\n        cursor: \"pointer\",\n        width: \"100%\",\n        marginLeft: \"2em\",\n        marginRight: \"2em\",\n        background: \"#ffffff00\",\n        position: \"relative\",\n      }}\n      onClick={onClick}\n    >\n      <Dimmer active={loading === \"loading\"}>\n        <Loader />\n      </Dimmer>\n      {done ? (\n        <Icon\n          size=\"massive\"\n          name=\"checkmark\"\n          style={{\n            position: \"absolute\",\n            color: \"#57b92d8c\",\n            top: \"20%\",\n            left: \"60%\",\n          }}\n        />\n      ) : null}\n      <Card.Content style={{ background: \"#ffffff\" }}>\n        <Icon size=\"huge\" name={icon} style={{ float: \"left\" }} />\n        <Card.Header content={name.replace(\"_\", \" \")} />\n        <Card.Meta content={subname} />\n\n        <Card.Description>{children}</Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default CardTemplate;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { List } from \"semantic-ui-react\";\nimport CardTemplate from \"./CardTemplate\";\nimport { useSelector } from \"react-redux\";\n\nconst propTypes = {\n  /** The name of the source from which to gather the data */\n  source: PropTypes.string.isRequired,\n  /** A subname, for extra info */\n  subname: PropTypes.string.isRequired,\n  /** An array of data names (e.g., Browsing history) that is expected to be produced */\n  produces: PropTypes.array.isRequired,\n  /** The name of an Icon from semantic ui, see https://semantic-ui.com/elements/icon.html  */\n  icon: PropTypes.string.isRequired,\n  /** Event handler for clicks. Not strictly necessary, because the card can also be used as a trigger (as in GatherGoogleTakeout) */\n  onClick: PropTypes.func,\n  /** String indicating loading status */\n  loading: PropTypes.string.isRequired,\n};\n\n/**\n * The template for generating GatherCards.\n * These are the cards in the Gather column on the home page.\n */\nconst GatherCard = ({ source, subname, produces, icon, onClick, loading }) => {\n  const statuses = useSelector((state) => {\n    return state.dataStatus.filter((data) => data.source === source);\n  });\n  let done = true;\n  const produced = produces.map((p) => {\n    const status = statuses.find((s) => s.name === p);\n    if (!status) done = false;\n    return status ? status : { name: p, status: \"empty\" };\n  });\n\n  return (\n    <CardTemplate\n      name={source}\n      subname={subname}\n      icon={icon}\n      onClick={onClick}\n      loading={loading}\n      done={done}\n    >\n      <List style={{ textAlign: \"left\" }}>{produced.map(statusMessage)}</List>\n    </CardTemplate>\n  );\n};\n\nconst statusMessage = (produced) => {\n  const name = produced.name.replace(\"_\", \" \");\n  if (produced.status === \"failed\")\n    return (\n      <List.Item>\n        <List.Icon name=\"close\" color=\"red\" />\n        <List.Content>\n          Failed to get <b>{name}</b>\n        </List.Content>\n      </List.Item>\n    );\n  if (produced.status === \"finished\")\n    return (\n      <List.Item>\n        <List.Icon name=\"check circle outline\" color=\"green\" />\n        <List.Content>\n          Gathered <b>{name}</b>\n        </List.Content>\n      </List.Item>\n    );\n\n  return (\n    <List.Item>\n      <List.Icon name=\"circle outline\" />\n      <List.Content>\n        Click to gather <b>{name}</b>\n      </List.Content>\n    </List.Item>\n  );\n};\n\nGatherCard.propTypes = propTypes;\nexport default GatherCard;\n","export default __webpack_public_path__ + \"static/media/googleTakeout1.d43cb755.gif\";","export default __webpack_public_path__ + \"static/media/googleTakeout2.97152dfa.gif\";","const STOPWORDS = [\"and\", \"or\", \"not\", \"the\", \"it\"]; // etc\nconst STOPWORDS_LOOKUP = STOPWORDS.reduce((obj, sw) => {\n  obj[sw] = true;\n  return obj;\n}, {});\n\n/**\n * Quick and dirty word tokenization, with very basic stopword filtering\n * Probably should replace this with a proper lightweight NLP package\n * @param {string} text The text to tokenize\n * @returns An array of the (filtered) tokens\n */\nconst tokenize = (text) => {\n  return text.split(/\\W+/).filter((token) => {\n    token = token.toLowerCase();\n    if (token.length <= 1) return false; // also drop single chars and empty\n    if (STOPWORDS_LOOKUP[token]) return false;\n    return true;\n  });\n};\n\nexport default tokenize;\n","export const setDataStatus = (dataStatus) => {\n  return {\n    type: \"SET_DATA_STATUS\",\n    dataStatus,\n  };\n};\n\nexport const updateDataStatus = (name, source, status) => {\n  const date = status === \"finished\" ? new Date() : null;\n\n  return (dispatch, getState) => {\n    const { dataStatus } = getState();\n    const newDataStatus = [...dataStatus];\n    const i = newDataStatus.findIndex((data) => data.name === name && data.source === source);\n    if (i < 0) {\n      newDataStatus.push({ name, source, date, status: status });\n    } else {\n      newDataStatus[i] = { ...newDataStatus[i], status: status };\n      if (date) newDataStatus[i].date = date;\n    }\n    dispatch(setDataStatus(newDataStatus));\n  };\n};\n","import React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Button, Container, Grid, Header, List, Modal, Segment } from \"semantic-ui-react\";\nimport gt1 from \"images/googleTakeout1.gif\";\nimport gt2 from \"images/googleTakeout2.gif\";\nimport db from \"apis/db\";\nimport tokenize from \"util/tokenize\";\n\nimport JSZip from \"jszip\";\nimport { useDispatch } from \"react-redux\";\nimport { updateDataStatus } from \"actions\";\n\n// This script handles everything related to importing Google_Takeout data\n// It should serve as an example for implementing other platforms\n// (and could probably do with a makeover)\n\nconst propTypes = {\n  /** A <GatherCard/>, which then serves as the trigger for the modal when clicked on */\n  children: PropTypes.element,\n  /** callback function for setting the loading status */\n  setLoading: PropTypes.func,\n};\n\n/**\n * The modal that opens when the Google_Takeout Gather card is clicked.\n */\nconst GatherGoogleTakeout = ({ children, setLoading }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={children}\n    >\n      <Modal.Header>Google Takeout</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <p>\n            As you can imagine, Google has a lot of data about many people, and probably about you\n            as well. A lesser known fact is that the data is still yours, and Google is legally\n            required to give you access to it. You can obtain this data via{\" \"}\n            <a href=\"https://takeout.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Google Takeout.\n            </a>{\" \"}\n          </p>\n          <br />\n\n          <Grid stackable>\n            <Grid.Column width={16}>\n              <Container>\n                <Header>How do I order takeout from Google?</Header>\n\n                <List ordered>\n                  <List.Item>\n                    First, open the{\" \"}\n                    <a href=\"https://takeout.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                      Google Takeout\n                    </a>{\" \"}\n                    website (the link opens in a new tab or window).\n                  </List.Item>\n                  <List.Item>\n                    Find the list under <b>Create a new export</b>. Unselect everything, and then\n                    only select <b>Chrome</b> and <b>Youtube</b>\n                  </List.Item>\n\n                  <List.Item>\n                    For Youtube we also filter out some content. Click on{\" \"}\n                    <b>All Youtube data included</b>, and make sure to select only <b>History</b>.\n                    Then click on <b>Multiple formats</b> and for <b>History</b> change <b>HTML</b>{\" \"}\n                    to <b>JSON</b>\n                  </List.Item>\n                  <Grid stackable style={{ marginTop: \"1em\", marginBottom: \"1em\" }}>\n                    <Grid.Column width={8}>\n                      <Header textAlign=\"center\">Step 2</Header>\n                      <Segment style={{ padding: 0 }}>\n                        <img width=\"100%\" src={gt1} alt=\"loading...\" />\n                      </Segment>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                      <Header textAlign=\"center\">Step 3</Header>\n                      <Segment style={{ padding: 0 }}>\n                        <img width=\"100%\" src={gt2} alt=\"loading...\" />\n                      </Segment>\n                    </Grid.Column>\n                  </Grid>\n                  <List.Item>\n                    Finally, click <b>Next step</b>. Here you can click <b>Create export</b> (the\n                    default settings are good). If you followed the selection steps, this will only\n                    be a few megabytes, and Google will send you the download link in a few minutes.\n                    This link will give you a <b>zip</b> file, that you can upload here:\n                  </List.Item>\n                </List>\n                <br />\n                <WriteToDB setOpen={setOpen} setLoading={setLoading} />\n              </Container>\n            </Grid.Column>\n          </Grid>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button onClick={() => setOpen(false)}>Cancel</Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nconst WriteToDB = ({ setOpen, setLoading }) => {\n  const dispatch = useDispatch();\n  const ref = useRef();\n\n  const onChangeHandler = async (e) => {\n    dispatch(updateDataStatus(\"Browsing\", \"Google_Takeout\", \"loading\"));\n    dispatch(updateDataStatus(\"Search\", \"Google_Takeout\", \"loading\"));\n    dispatch(updateDataStatus(\"Youtube\", \"Google_Takeout\", \"loading\"));\n\n    let failed = false;\n\n    try {\n      setLoading(\"loading\");\n      setOpen(false);\n      let newZip = new JSZip();\n      let fileblob = e.target.files[0];\n\n      const zipped = await newZip.loadAsync(fileblob);\n\n      try {\n        let chrome = await zipped.file(\"Takeout/Chrome/BrowserHistory.json\").async(\"text\");\n        chrome = JSON.parse(chrome);\n        await writeChromeHistory(chrome[\"Browser History\"]);\n        dispatch(updateDataStatus(\"Browsing\", \"Google_Takeout\", \"finished\"));\n        dispatch(updateDataStatus(\"Search\", \"Google_Takeout\", \"finished\"));\n      } catch (e) {\n        failed = true;\n        dispatch(updateDataStatus(\"Browsing\", \"Google_Takeout\", \"failed\"));\n        dispatch(updateDataStatus(\"Search\", \"Google_Takeout\", \"failed\"));\n      }\n\n      try {\n        let youtube;\n        const isJSON = zipped.file(\"Takeout/YouTube and YouTube Music/history/watch-history.json\");\n        if (isJSON) {\n          youtube = await zipped\n            .file(\"Takeout/YouTube and YouTube Music/history/watch-history.json\")\n            .async(\"text\");\n          youtube = JSON.parse(youtube);\n        } else {\n          youtube = await zipped\n            .file(\"Takeout/YouTube and YouTube Music/history/watch-history.html\")\n            .async(\"text\");\n          youtube = parseYoutubeHtml(youtube);\n        }\n        await writeYoutubeHistory(youtube);\n        dispatch(updateDataStatus(\"Youtube\", \"Google_Takeout\", \"finished\"));\n      } catch (e) {\n        console.log(e);\n        failed = true;\n        dispatch(updateDataStatus(\"Youtube\", \"Google_Takeout\", \"failed\"));\n      }\n    } catch (e) {\n      setLoading(\"failed\");\n    }\n\n    setLoading(failed ? \"failed\" : \"finished\");\n  };\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Button primary onClick={() => ref.current.click()}>\n        Import Google_Takeout\n      </Button>\n      <input\n        ref={ref}\n        type=\"file\"\n        name=\"file\"\n        hidden\n        onChange={onChangeHandler}\n        accept=\"application/zip\"\n      />\n    </div>\n  );\n};\n\nconst parseYoutubeHtml = (string) => {\n  const doc = new DOMParser().parseFromString(string, \"text/html\");\n  const nodes = doc.querySelector(\".mdl-grid\").querySelectorAll(\".mdl-grid\");\n\n  const items = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const aList = node.querySelectorAll(\"a\");\n\n    const item = {};\n    if (aList.length === 2) {\n      item.subtitles = { name: aList[1].textContent, url: aList[1].attributes.href.textContent };\n    }\n    item.titleUrl = aList[0].attributes.href.textContent;\n    item.title = aList[0].textContent;\n\n    const br = node.children[1].querySelectorAll(\"br\");\n    const datestring = br[br.length - 1].nextSibling.textContent;\n    const date = new Date(Date.parse(datestring.replace(\"CEST\", \"GMT+0200\")));\n    item.time = date.toISOString();\n    items.push(item);\n  }\n  return items;\n};\n\nconst writeChromeHistory = async (history) => {\n  let urls = [];\n  let queries = [];\n\n  for (let item of history) {\n    let url = new URL(item.url);\n    if (url.hostname + url.pathname === \"www.google.com/search\") {\n      const query = item.title.replace(\"- Google Search\", \"\").trim();\n      let words = tokenize(query);\n      queries.push({\n        query: query,\n        word: words,\n        date: convertTimestamp(item.time_usec),\n        browser: \"Chrome\",\n      });\n      continue;\n    }\n\n    urls.push({\n      url: item.url,\n      title: item.title,\n      domain: url.hostname,\n      browser: \"Chrome\",\n      date: convertTimestamp(item.time_usec),\n      page_transition: item.page_transition,\n    });\n  }\n\n  await db.addData(queries, \"Search\", \"Google_Takeout\", [\"url\", \"date\"]);\n  await db.addData(urls, \"Browsing\", \"Google_Takeout\", [\"query\", \"date\"]);\n};\n\nconst writeYoutubeHistory = async (history) => {\n  let d = history.map((item) => {\n    return {\n      url: item.titleUrl,\n      title: item.title,\n      date: new Date(item.time),\n      channel: item.subtitles ? item.subtitles.name : \"channel removed\",\n      channel_url: item.subtitles ? item.subtitles.url : \"channel removed\",\n    };\n  });\n\n  console.log(d);\n  await db.addData(d, \"Youtube\", \"Google_Takeout\", [\"url\", \"date\"]);\n};\n\nconst convertTimestamp = (time) => {\n  // seems to be in microseconds since epoch\n  return new Date(Math.round(time / 1000));\n};\n\nGatherGoogleTakeout.propTypes = propTypes;\nexport default GatherGoogleTakeout;\n","import React, { useState } from \"react\";\nimport GatherCard from \"./GatherCard\";\nimport GatherGoogleTakeout from \"components/gather/GatherGoogleTakeout\";\n\n// Like explorecards, this creates the gather cards\n// These are a bit more tricky because these create modals (instead of routing to a new page)\n// The gather components therefore take the GatherCard as a child (used to trigger the modal)\n// and a setLoading prop that reports the loading status of the gather script. (see GatherGoogleTakeout)\n\n/**\n * Returns all gather cards to be rendered on the home page.\n */\nconst GatherCardColumn = () => {\n  // Currently only uses google takeout, so it looks silly\n  return <GoogleTakeout />;\n};\n\n/**\n * Renders the gather card for Google Takeout\n */\nconst GoogleTakeout = () => {\n  const [loading, setLoading] = useState(\"idle\");\n\n  // yes, it looks weird that the GatherCard is a child of the GatherGoogleTakeout\n  // the reason is that GatherGoogleTakeout is a popup, and the GatherCard is the trigger\n  return (\n    <GatherGoogleTakeout setLoading={setLoading}>\n      <GatherCard\n        source={\"Google_Takeout\"}\n        subname={\"takeout.google.com\"}\n        produces={[\"Browsing\", \"Search\", \"Youtube\"]}\n        icon={\"google\"}\n        loading={loading}\n      />\n    </GatherGoogleTakeout>\n  );\n};\n\nexport default GatherCardColumn;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport CardTemplate from \"./CardTemplate\";\nimport { List } from \"semantic-ui-react\";\n\nconst propTypes = {\n  /** The name of the type of data to explore. */\n  name: PropTypes.string.isRequired,\n  /** A subname, for extra info */\n  subname: PropTypes.string.isRequired,\n  /** The name of an Icon from semantic ui, see https://semantic-ui.com/elements/icon.html  */\n  icon: PropTypes.string.isRequired,\n};\n\n/**\n * The template for generating ExploreCards.\n * These are the cards in the Explore column on the home page.\n */\nconst ExploreCard = ({ name, subname, icon }) => {\n  const history = useHistory();\n  const statuses = useSelector((state) => {\n    return state.dataStatus.filter((data) => data.name === name && data.status === \"finished\");\n  });\n\n  if (!statuses || statuses.length === 0) return null;\n  console.log(statuses);\n\n  const onClick = () => {\n    history.push(name);\n  };\n\n  return (\n    <CardTemplate name={name} subname={subname} icon={icon} onClick={onClick}>\n      <List>{statuses.map(statusMessage)}</List>\n    </CardTemplate>\n  );\n};\n\nconst statusMessage = (status) => {\n  const date = status.date;\n  if (!date) return \"Data not yet gathered\"; // this shouldn't happen (card should only be shown if data available)\n\n  const oldTime = date.toISOString();\n  const currentTime = new Date().toISOString();\n\n  // if different day, show day\n  const today = oldTime.slice(0, 10) === currentTime.slice(0, 10);\n  const onDate = today ? \"today\" : `on ${oldTime.slice(0, 10)}`;\n\n  return (\n    <List.Item key={status.source}>\n      <List.Content>\n        Gathered {onDate} from <b>{status.source.replace(\"_\", \" \")}</b>\n      </List.Content>\n    </List.Item>\n  );\n};\n\nExploreCard.propTypes = propTypes;\nexport default ExploreCard;\n","import React from \"react\";\n\nimport ExploreCard from \"./ExploreCard\";\n\n/**\n * Returns all explore cards to be rendered on the home page.\n */\nconst ExploreCardColumn = () => {\n  return (\n    <>\n      <Browsing />\n      <Search />\n      <Youtube />\n    </>\n  );\n};\n\nconst Browsing = () => {\n  return <ExploreCard name={\"Browsing\"} subname={\"What pages did you visit?\"} icon={\"history\"} />;\n};\n\nconst Search = () => {\n  return <ExploreCard name={\"Search\"} subname={\"What did you search for?\"} icon={\"search\"} />;\n};\n\nconst Youtube = () => {\n  return <ExploreCard name={\"Youtube\"} subname={\"Channels and videos\"} icon={\"youtube\"} />;\n};\n\nexport default ExploreCardColumn;\n","import React, { useEffect } from \"react\";\nimport { Card, Grid, Header, Icon, Button, Popup } from \"semantic-ui-react\";\nimport logo from \"images/logo.png\";\nimport db from \"apis/db\";\n\nimport GatherCardColumn from \"./GatherCardColumn\";\nimport ExploreCardColumn from \"./ExploreCardColumn\";\nimport { useDispatch } from \"react-redux\";\nimport { setDataStatus } from \"actions\";\n\nconst headerStyle = {\n  color: \"white\",\n  fontSize: \"20px\",\n  filter: \"none\",\n  background: \"#00000078\",\n  paddingBottom: \"0.3em\",\n  paddingTop: \"0.4em\",\n};\n\nconst columnStyle = {\n  marginBottom: \"1em\",\n};\n\nconst cardGroupStyle = {\n  marginTop: \"2em\",\n};\n\nconst DataSquare = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // on startup, check statuses in db and write to redux\n    db.idb.dataStatus\n      .toArray()\n      .then((ds) => dispatch(setDataStatus(ds)))\n      .catch((e) => console.log(e));\n  }, [dispatch]);\n\n  return (\n    <div style={{ height: \"100vh\", backgroundImage: `url(${logo})`, backgroundSize: \"100% 100%\" }}>\n      <Grid stackable divided centered>\n        <Grid.Row style={{ height: \"60px\" }}>\n          <Grid.Column>\n            <DeleteDataButton />\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column textAlign=\"center\" width={5} style={columnStyle}>\n            <Header style={headerStyle}>\n              <Icon name=\"cloud download\" />\n              Gather\n            </Header>\n\n            <Card.Group style={cardGroupStyle}>\n              <GatherCardColumn />\n            </Card.Group>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" width={5} style={columnStyle}>\n            <Header style={headerStyle}>\n              <Icon name=\"search\" />\n              Explore\n            </Header>\n\n            <Card.Group style={cardGroupStyle}>\n              <ExploreCardColumn />\n            </Card.Group>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\" width={5} style={columnStyle}>\n            <Header style={headerStyle}>\n              <Icon name=\"student\" />\n              Donate\n            </Header>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nconst DeleteDataButton = () => {\n  const button = (\n    <Button\n      style={{\n        float: \"right\",\n        background: \"#00000000\",\n        margin: \"10px\",\n        color: \"white\",\n        border: \"1px solid white\",\n      }}\n    >\n      <Icon name=\"trash\" />\n      Delete all data\n    </Button>\n  );\n\n  return (\n    <Popup on=\"click\" trigger={button}>\n      <Popup.Header>Delete data from browser</Popup.Header>\n      <Popup.Content>\n        <p>Do you want to delete all the gathered data from the browser?</p>\n        <p>\n          Note that any data you downloaded will still be on your computer, so you might want to\n          delete that as well.\n        </p>\n      </Popup.Content>\n      <br />\n      <Button\n        negative\n        fluid\n        onClick={() => db.destroyEverything().then(() => window.location.reload())}\n      >\n        Delete data\n      </Button>\n    </Popup>\n  );\n};\n\nexport default DataSquare;\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\n\n/**\n * Create a Grid with a background that has a color on top of it.\n * This can be used with a transparent color to for instance darken a background\n * (for deployment, probably better to eventually just use a darkened image)\n * @returns\n */\nconst ColoredBackgroundGrid = ({ children, background, color }) => {\n  // just wrap the children in this component, pass an image path to background and a string to color\n  return (\n    <>\n      <div\n        style={{\n          zIndex: 1,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          left: 0,\n          background: color,\n          position: \"absolute\",\n        }}\n      />\n      <Grid\n        style={{\n          height: \"100vh\",\n          overflow: \"auto\",\n          backgroundSize: \"100% 100%\",\n\n          backgroundImage: `url(${background})`,\n        }}\n      >\n        <div style={{ zIndex: 2 }}>{children}</div>\n      </Grid>\n    </>\n  );\n};\n\nexport default ColoredBackgroundGrid;\n","import PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { Button, ButtonGroup, Checkbox, Modal } from \"semantic-ui-react\";\n\nconst propTypes = {\n  /** The name of the table in DB */\n  table: PropTypes.string,\n};\n\n// Use this modal by keeping a 'confirm' state as follows:\n//   const [deleteIds, setDeleteIds] = useState([])\n// Then add ConfirmDeleteModal to the return JSX, pass on deleteIds and setDeleteIds,\n// and set table ids to deleteIds to trigger the confirm delete modal\n\nconst ConfirmDeleteModal = ({ dashData, deleteIds, setDeleteIds }) => {\n  const [ask, setAsk] = useState(true);\n\n  const handleDelete = async () => {\n    await dashData.rmID(deleteIds);\n    setDeleteIds([]);\n  };\n\n  const n = deleteIds?.length || 0;\n  if (!ask && n === 1) handleDelete();\n\n  return (\n    <Modal style={{ backgroundColor: \"#00000054\" }} open={n > 0} onClose={() => setDeleteIds([])}>\n      <Modal.Header>Delete item{n === 1 ? \"\" : \"s\"}</Modal.Header>\n      <Modal.Content>\n        <p>Are you sure you want to delete {n === 1 ? \"this item\" : `${n} items`}?</p>\n\n        <br />\n        <Modal.Actions>\n          <ButtonGroup centered=\"true\">\n            <Button fluid primary onClick={() => setDeleteIds([])}>\n              Cancel\n            </Button>\n            <Button fluid color=\"red\" onClick={(e, d) => handleDelete()}>\n              Yes\n            </Button>\n          </ButtonGroup>\n          {n > 1 ? null : (\n            <Checkbox\n              style={{ float: \"right\" }}\n              onChange={(e, d) => setAsk(!d.value)}\n              label=\"Do not ask again. Next time, delete immediately when clicking the trash icon\"\n            />\n          )}\n        </Modal.Actions>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nConfirmDeleteModal.propTypes = propTypes;\nexport default React.memo(ConfirmDeleteModal);\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Container, Button, Visibility, Header, Segment, Table } from \"semantic-ui-react\";\nimport ConfirmDeleteModal from \"./ConfirmDeleteModal\";\n\nconst PAGESIZE = 25;\n\nconst propTypes = {\n  /** The name of the table in DB */\n  table: PropTypes.string,\n  /** An array indicating what columns should be shown and how.\n   * Items can be simple strings with columns names, or objects of {name: 'column name': f: function, width: int }\n   * f and width are optional. f is a function with the row object as an argument and should return the value to display\n   * width is an integer between 1 and 16 for semantic style width hints */\n  columns: PropTypes.array,\n  /** An array with row IDs to filter on */\n  selection: PropTypes.array,\n  /** A string to indicate the loading status */\n  loading: PropTypes.bool,\n};\n\n/**\n * Creates a table for a given table in the indexedDB\n */\nconst DataTable = ({ dashData, columns, selection }) => {\n  const [n, setN] = useState(0);\n  const [data, setData] = useState([]);\n  const [selectionN, setSelectionN] = useState(0);\n  const [deleteIds, setDeleteIds] = useState([]);\n\n  useEffect(() => {\n    if (!dashData) {\n      setData([]);\n      return null;\n    }\n    setSelectionN(dashData.N(selection));\n    setData(dashData.listData(PAGESIZE, selection));\n    setN(dashData.N());\n  }, [dashData, selection]);\n\n  const onBottomVisible = async () => {\n    // infinite scroll\n    // <Visibility> checks whether bottom of (invisible) div is visible, and if so adds more data\n    setData(dashData.listData(data.length + PAGESIZE, selection));\n  };\n\n  return (\n    <Container\n      style={{\n        height: \"98%\",\n        width: \"98%\",\n        padding: \"0\",\n      }}\n    >\n      <Segment style={{ background: \"#00000000\", height: \"50px\", margin: \"0\" }}>\n        <Header textAlign=\"center\" as=\"h2\" style={{ color: \"white\" }}>\n          {selectionN === n ? null : (\n            <Button\n              onClick={() => setDeleteIds(selection)}\n              icon=\"trash alternate\"\n              style={{\n                color: \"#b23434bd\",\n                padding: \"0\",\n                background: \"#ffffff00\",\n              }}\n            />\n          )}\n          {selectionN === n ? n : `${selectionN} / ${n}`} items\n        </Header>\n      </Segment>\n      <Container\n        style={{\n          height: \"calc(100% - 50px)\",\n          width: \"100%\",\n          overflow: \"auto\",\n          paddingLeft: \"20px\",\n        }}\n      >\n        <Visibility continuous onBottomVisible={onBottomVisible}>\n          <ScrollingTable dashData={dashData} data={data} columns={columns} />\n        </Visibility>\n      </Container>\n\n      <ConfirmDeleteModal dashData={dashData} deleteIds={deleteIds} setDeleteIds={setDeleteIds} />\n    </Container>\n  );\n};\n\nconst ScrollingTable = ({ dashData, data, columns }) => {\n  const [deleteIds, setDeleteIds] = useState([]);\n\n  const createHeader = () => {\n    const columnsWithTrash = [{ name: \"delete\", width: 1 }, ...columns];\n    const cells = columnsWithTrash.map((column) => {\n      const name = typeof column === \"object\" ? column.name : column;\n      return (\n        <Table.HeaderCell\n          key={column}\n          width={column?.width}\n          style={{ top: \"0px\", position: \"sticky\", zIndex: \"2\" }}\n        >\n          {name}\n        </Table.HeaderCell>\n      );\n    });\n    return (\n      <Table.Header>\n        <Table.Row>{cells}</Table.Row>\n      </Table.Header>\n    );\n  };\n\n  const createBody = () => {\n    const rows = data.map((row, i) => {\n      const cells = columns.map((column) => {\n        const name = typeof column === \"object\" ? column.name : column;\n        const f = column?.f || null;\n        const content = processContent(row, name, f);\n        return (\n          <Table.Cell key={name + \"_\" + i} title={content}>\n            {content}\n          </Table.Cell>\n        );\n      });\n      return (\n        <Table.Row key={i}>\n          <Table.Cell key=\"0\">\n            <Button\n              style={{ padding: \"5px\", background: \"red\", color: \"black\" }}\n              onClick={() => setDeleteIds([row._INDEX])}\n              icon=\"trash alternate\"\n            />\n          </Table.Cell>\n          {cells}\n        </Table.Row>\n      );\n    });\n    return <Table.Body>{rows}</Table.Body>;\n  };\n\n  if (data === null || data.length === 0 || !columns) return null;\n\n  return (\n    <Table\n      unstackable\n      fixed\n      singleLine\n      style={{ width: \"100%\", color: \"white\", background: \"#00000099\" }}\n    >\n      {createHeader()}\n      {createBody()}\n      <ConfirmDeleteModal dashData={dashData} deleteIds={deleteIds} setDeleteIds={setDeleteIds} />\n    </Table>\n  );\n};\n\nconst processContent = (row, column, f) => {\n  let content;\n  if (f) {\n    content = f(row);\n  } else {\n    content = row[column];\n    if (content instanceof Date) content = content.toISOString().slice(0, 19).replace(/T/g, \" \");\n  }\n  return content;\n};\n\nDataTable.propTypes = propTypes;\nexport default React.memo(DataTable);\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Input, Icon } from \"semantic-ui-react\";\n\nconst propTypes = {\n  /** The name of the table */\n  table: PropTypes.string,\n  /** An array with names of the (text) columns in the table that should be used for the fulltext search */\n  searchOn: PropTypes.array,\n  /** A callback function for returning the row IDs that match the query */\n  setSelection: PropTypes.func,\n};\n\n/**\n * Create an input for full text search\n */\nconst QueryInput = ({ dashData, searchOn, setSelection }) => {\n  const [search, setSearch] = useState(\"\");\n  const [searching, setSearching] = useState(false);\n\n  useEffect(() => {\n    setSearching(true);\n    const timer = setTimeout(() => {\n      if (dashData && search) {\n        setSelection(dashData.search(search, searchOn));\n      } else {\n        setSelection(null);\n      }\n      setSearching(false);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [dashData, search, searchOn, setSearching, setSelection]);\n\n  return (\n    <div style={{ display: \"flex\", margin: \"0\" }}>\n      <div class=\"dimmable\" style={{ width: \"50px\" }}>\n        <Icon\n          size=\"big\"\n          name={searching ? \"compass\" : \"search\"}\n          loading={searching}\n          style={{ paddingTop: \"9px\", paddingLeft: \"13fpx\", color: \"white\" }}\n        />\n      </div>\n      <div style={{ flex: \"1 1 auto\" }}>\n        <Input\n          fluid\n          value={search}\n          icon={\n            <Button\n              compact\n              icon=\"window close\"\n              onClick={() => setSearch(\"\")}\n              size=\"huge\"\n              style={{ color: \"white\", height: \"1em\", background: \"#ffffff00\" }}\n            />\n          }\n          onChange={(e, d) => setSearch(d.value)}\n        ></Input>\n      </div>\n    </div>\n  );\n};\n\nQueryInput.propTypes = propTypes;\nexport default React.memo(QueryInput);\n","/**\n * Intersect ordered numbers across multiple arrays.\n * Used in this app to quickly intersect the table row ids from different filters (e.g., text query, date, key)\n *\n * @param {array} arrays an array of arrays, where each array has sorted (!!!) integers\n * @returns An array of integers\n */\nconst intersect = (arrays) => {\n  arrays = arrays.filter((array) => array !== null);\n  if (arrays.length === 0) return null;\n  if (arrays.length === 1) return arrays[0];\n\n  const cursors = new Array(arrays.length).fill(0);\n  const res = [];\n\n  while (!anyDone(arrays, cursors)) {\n    if (allEqual(arrays, cursors)) {\n      console.log(cursors[0]);\n      res.push(arrays[0][cursors[0]]);\n      for (let i = 0; i < cursors.length; i++) cursors[i]++;\n    }\n    const max = allMax(arrays, cursors);\n    for (let i = 0; i < cursors.length; i++) {\n      if (arrays[i][cursors[i]] < max) cursors[i]++;\n    }\n  }\n  return res;\n};\n\nconst anyDone = (arrays, cursors) => {\n  for (let i = 0; i < arrays.length; i++) {\n    if (arrays[i].length <= cursors[i]) return true;\n  }\n  return false;\n};\n\nconst allEqual = (arrays, cursors) => {\n  for (let i = 1; i < arrays.length; i++) {\n    if (arrays[i][cursors[i]] !== arrays[0][cursors[0]]) return false;\n  }\n  console.log(\"-------------\");\n  for (let i = 0; i < arrays.length; i++) {\n    console.log(arrays[i][cursors[i]]);\n  }\n  return true;\n};\n\nconst allMax = (arrays, cursors) => {\n  let max = arrays[0][cursors[0]];\n  for (let i = 1; i < arrays.length; i++) {\n    if (arrays[i][cursors[i]] > max) max = arrays[i][cursors[i]];\n  }\n  return max;\n};\n\nexport default intersect;\n","import db from \"apis/db\";\n\n// move as much of the common data wrangling stuff here\n\nexport default class DashboardData {\n  constructor(name, data, setData, deleted = null) {\n    this.name = name;\n    this.data = data;\n    this.setData = setData;\n    this.deleted = deleted ? deleted : new Array(data.length).fill(false);\n  }\n\n  triggerUpdate() {\n    // need to deep copy class to trigger state update, and just recreating it seems fastest\n    this.setData(new DashboardData(this.name, this.data, this.setData, this.deleted));\n  }\n\n  async rmID(indices) {\n    // remove data by index. Note that data has a ._INDEX field to be certain the right indices are used\n    const deleted = [...this.deleted];\n    console.log(indices);\n    for (let i of indices) deleted[i] = true;\n    try {\n      await db.setDeleted(this.name, deleted);\n      this.deleted = deleted; // only update locally if DB write succeeded\n      this.triggerUpdate();\n    } catch (e) {\n      console.log(\"could not delete data\");\n    }\n  }\n\n  search(query, fields = null) {\n    // query can be a single query (string) or array.\n    // fields can be specific fields to search in, otherwise use all.\n    if (query === null || query.length === 0) return null;\n\n    const selection = [];\n\n    const queries = Array.isArray(query) ? query : [query];\n    const regexes = [];\n    for (let q of queries) regexes.push(new RegExp(q.replace(/[-/\\\\^$*+?.()|[\\]{}]/, \"\\\\$&\"), \"i\"));\n\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.deleted[i]) continue;\n      const searchIn = fields ? fields : Object.keys(this.data[i]);\n      field_loop: for (let field of searchIn) {\n        for (let regex of regexes) {\n          if (regex.test(this.data[i][field])) {\n            selection.push(i);\n            break field_loop;\n          }\n        }\n      }\n    }\n    return selection;\n  }\n\n  searchValues(values, field) {\n    if (values === null || values.length === 0) return null;\n\n    const selection = [];\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.data[i]._DELETED) continue;\n      value_loop: for (let value of values) {\n        if (Array.isArray(this.data[i][field])) {\n          for (let datavalue of this.data[i][field]) {\n            if (datavalue === value) {\n              selection.push(i);\n              break value_loop;\n            }\n          }\n        } else {\n          if (value === this.data[i][field]) {\n            selection.push(i);\n            break;\n          }\n        }\n      }\n    }\n    return selection;\n  }\n\n  findIndices(filterFunction) {\n    // argument is a function. Takes data item as argument and should return bool\n    const selection = [];\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.deleted[i]) continue;\n      if (filterFunction(this.data[i])) selection.push(i);\n    }\n    return selection;\n  }\n\n  count(field, selection) {\n    // count unique values in field, return as {[value]: n, [value]: n}\n    let counts = {};\n\n    let index;\n    for (let i = 0; i < this.data.length; i++) {\n      if (selection) {\n        if (i >= selection.length) break;\n        index = selection[i];\n      } else index = i;\n\n      if (this.deleted[index]) continue;\n      let values = this.data[index][field];\n      if (!Array.isArray(values)) values = [values];\n      for (let value of values) {\n        if (value === \"\") continue;\n        if (!counts[value]) counts[value] = 0;\n        counts[value]++;\n      }\n    }\n    return counts;\n  }\n\n  N(selection) {\n    let n = 0;\n    let index;\n    for (let i = 0; i < this.data.length; i++) {\n      if (selection) {\n        if (i >= selection.length) break;\n        index = selection[i];\n      } else index = i;\n\n      if (this.deleted[index]) continue;\n      n++;\n    }\n    return n;\n  }\n\n  listData(n, selection) {\n    let list = [];\n    let index;\n    for (let i = 0; i < this.data.length; i++) {\n      if (list.length === n) break;\n      if (selection) {\n        if (i >= selection.length) break;\n        index = selection[i];\n      } else index = i;\n\n      if (this.deleted[index]) continue;\n      list.push(this.data[index]);\n    }\n    return list;\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport db from \"apis/db\";\nimport DashboardData from \"./DashboardData\";\n\n/**\n * Get a dataset as a DashboardData class, with methods for searching, counting and filtering the data.\n *\n * @param {*} name     Name in db.data\n * @param {*} fields   An array with fieldnames from data to use\n * @returns\n */\nexport default function useDashboardData(name, fields) {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    createDashData(name, fields, setData);\n  }, [name, fields]);\n\n  return data;\n}\n\nconst createDashData = async (name, fields, setData) => {\n  try {\n    let data = await db.getData(name, fields);\n    const dashData = new DashboardData(name, data, setData); // with setData, dashboard can trigger its own state update\n    setData(dashData);\n  } catch (e) {\n    console.log(e);\n    setData(null);\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, Icon, Button, Container, Header, Item } from \"semantic-ui-react\";\n\nimport { useHistory } from \"react-router\";\n\nimport ColoredBackgroundGrid from \"./dashboardParts/ColoredBackgroundGrid\";\nimport background from \"images/background.jpeg\";\n\nimport DataTable from \"./dashboardParts/DataTable\";\nimport QueryInput from \"./dashboardParts/QueryInput\";\nimport intersect from \"util/intersect\";\nimport useDashboardData from \"../dashboardData/useDashboardData\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  /** The name of the type of data to explore. */\n  dataName: PropTypes.string.isRequired,\n  /** an Array indicating which fields in table should be used in the fulltext search */\n  searchOn: PropTypes.array.isRequired,\n  /** an array that conveys which fields in the table are shown in the DataTable. See DataTable for details */\n  columns: PropTypes.array.isRequired,\n  /** A react component that produces a visualization. Gets the properties dashData, inSelection and setOutSelection */\n  VisComponent: PropTypes.func.isRequired,\n  /** A function to produce the statistics. Gets arguments dashData and selection, and needs to return an array of objects\n   *  with keys 'label' and 'value'.\n   */\n  calcStatistics: PropTypes.func.isRequired,\n};\n\n/**\n * Re-usable component for making a dashboard. See e.g., BrowsingHistory.js for an example of how to use\n */\nconst DashboardTemplate = ({ dataName, searchOn, columns, VisComponent, calcStatistics }) => {\n  const dashData = useDashboardData(dataName);\n  const [statistics, setStatistics] = useState([]);\n  const [altSelection, setAltSelection] = useState(null);\n  const [querySelection, setQuerySelection] = useState(null);\n  const [selection, setSelection] = useState(null);\n\n  useEffect(() => {\n    setSelection(intersect([querySelection, altSelection]));\n  }, [querySelection, altSelection]);\n\n  useEffect(() => {\n    setStatistics(calcStatistics(dashData, selection));\n  }, [dashData, selection, calcStatistics]);\n\n  return (\n    <ColoredBackgroundGrid background={background} color={\"#000000b0\"}>\n      <Grid stackable>\n        <Grid.Row style={{}}>\n          <Grid.Column width={4}>\n            <BackButton />\n            <Container\n              style={{\n                margin: \"50px\",\n                marginTop: \"100px\",\n                padding: \"20px\",\n              }}\n            >\n              <div style={{ marginBottom: \"1em\" }}>\n                <QueryInput\n                  dashData={dashData}\n                  searchOn={searchOn}\n                  setSelection={setQuerySelection}\n                />\n              </div>\n\n              <Statistics statistics={statistics} />\n            </Container>\n          </Grid.Column>\n          <Grid.Column width={12}>\n            <VisComponent\n              dashData={dashData}\n              inSelection={querySelection}\n              setOutSelection={setAltSelection}\n            />\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row style={{ height: \"500px\", width: \"100%\" }}>\n          <DataTable dashData={dashData} columns={columns} selection={selection} />\n        </Grid.Row>\n      </Grid>\n    </ColoredBackgroundGrid>\n  );\n};\n\nconst Statistics = ({ statistics }) => {\n  // statistics should be an array of objects, with: \"label\" and \"value\" keys.\n\n  return (\n    <Container\n      style={{\n        height: \"98%\",\n        padding: \"20px\",\n        background: \"#55555587\",\n        borderRadius: \"10px\",\n      }}\n    >\n      <Header as=\"h1\" align={\"center\"} style={{ color: \"white\", padding: \"0\", margin: \"0\" }}>\n        Statistics\n      </Header>\n      <Item.Group>\n        {statistics.map((statistic) => {\n          return (\n            <Item key={statistic.label}>\n              <Item.Content>\n                <Item.Header style={{ color: \"white\" }}>{statistic.label}</Item.Header>\n                <Item.Description style={{ color: \"white\" }}>{statistic.value}</Item.Description>\n              </Item.Content>\n            </Item>\n          );\n        })}\n      </Item.Group>\n    </Container>\n  );\n};\n\nconst BackButton = () => {\n  const history = useHistory();\n\n  return (\n    <Button\n      style={{\n        position: \"absolute\",\n        left: \"0\",\n        background: \"#00000000\",\n        color: \"white\",\n        border: \"1px solid white\",\n        marginLeft: \"20px\",\n        marginTop: \"20px\",\n      }}\n      onClick={() => history.push(\"/datasquare\")}\n    >\n      <Icon name=\"backward\" />\n      Go back\n    </Button>\n  );\n};\n\nDashboardTemplate.propTypes = propTypes;\nexport default React.memo(DashboardTemplate);\n","import React, { useEffect, useState } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport ReactWordcloud from \"react-wordcloud\";\n\nimport { Dimmer, Dropdown, Grid, Header, Loader } from \"semantic-ui-react\";\n\nconst wordcloudOptions = {\n  rotations: 0,\n  enableOptimizations: true,\n  enableTooltip: false,\n  deterministic: true,\n  fontFamily: \"impact\",\n  fontSizes: [20, 60],\n  transitionDuration: 500,\n  colors: [\"white\"],\n};\nconst wordcloudSize = undefined;\n\nconst propTypes = {\n  /** The name of the table in db */\n  table: PropTypes.string,\n  /** The name of the field in db */\n  field: PropTypes.string,\n  /** An array with a selection of row ids in table */\n  inSelection: PropTypes.array,\n  /** An integer specifying the number of words in the cloud*/\n  nWords: PropTypes.number,\n  /** A boolean for whether data is loading */\n  loading: PropTypes.bool,\n  /** A callback for setting the selection state */\n  setOutSelection: PropTypes.func,\n};\n\n/**\n * Makes a wordcloud for keys, for a given table:field in db\n */\nconst KeyCloud = ({ dashData, field, inSelection, nWords, setOutSelection }) => {\n  const [keys, setKeys] = useState(new Set([]));\n  const [words, setWords] = useState([]);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!dashData) {\n      setData(null);\n      setKeys(new Set([]));\n      return;\n    }\n    const counts = dashData.count(field, inSelection);\n    let countsArray = Object.keys(counts).map((key) => {\n      return { value: key, n: counts[key] };\n    });\n    countsArray.sort((a, b) => b.n - a.n); // sort from high to low value\n    setData(countsArray);\n    setKeys((keys) => new Set([...keys].filter((key) => counts[key] != null)));\n  }, [dashData, inSelection, field, setData, setLoading, setKeys]);\n\n  useEffect(() => {\n    if (!data) {\n      setWords([]);\n      return null;\n    }\n    const words = data.slice(0, nWords).map((word) => {\n      const text = word.value.replace(\"www.\", \"\");\n      return { text: text, key: word.value, value: word.n };\n    });\n    setWords(words);\n  }, [data, nWords]);\n\n  useEffect(() => {\n    let ignore = false;\n    const getSelection = async () => {\n      let selection = keys.size > 0 ? await dashData.searchValues([...keys], field) : null;\n      if (!ignore) setOutSelection(selection);\n    };\n    getSelection();\n    return () => {\n      ignore = true; // use closure to 'cancel' promise. prevents delayed older requests from overwriting new\n    };\n  }, [keys, setOutSelection, dashData, field]);\n\n  const callbacks = React.useCallback(() => {\n    return {\n      onWordClick: (word) => {\n        setKeys((old) => {\n          const newkeys = new Set([...old]);\n          if (newkeys.has(word.key)) {\n            newkeys.delete(word.key);\n          } else {\n            newkeys.add(word.key);\n          }\n          return newkeys;\n        });\n      },\n      getWordColor: (word) => {\n        if (keys.size === 0) return \"white\";\n        return keys.has(word.key) ? \"white\" : \"grey\";\n      },\n    };\n  }, [keys]);\n\n  return (\n    <Grid\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        background: \"#ffffff00\",\n        border: \"none\",\n        boxShadow: \"none\",\n        paddingTop: \"2em\",\n      }}\n    >\n      <Grid.Column width={12} style={{ padding: \"0\", margin: \"0\" }}>\n        <Dimmer active={loading}>\n          <Loader />\n        </Dimmer>\n        <Header as=\"h1\" align={\"center\"} style={{ color: \"white\", padding: \"0\", margin: \"0\" }}>\n          Top {nWords} {field}s\n        </Header>\n        <div style={{ overflow: \"auto\" }}>\n          <div style={{ height: \"400px\", minWidth: \"800px\" }}>\n            <ReactWordcloud\n              words={words}\n              minSize={wordcloudSize}\n              callbacks={callbacks()}\n              options={wordcloudOptions}\n            />\n          </div>\n        </div>\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <Header style={{ color: \"white\" }}>{field.toUpperCase()} FILTER</Header>\n        <p style={{ fontStyle: \"italic\", color: \"white\" }}>\n          Filter on {field} by adding them below or clicking on the wordcloud\n        </p>\n        <Dropdown\n          fluid\n          multiple\n          selection\n          clearable\n          search\n          style={{\n            width: \"100%\",\n            color: \"white\",\n            minHeight: \"22em\",\n            background: \"#ffffff21\",\n          }}\n          value={[...keys]}\n          onChange={(e, d) => setKeys(new Set(d.value))}\n          options={\n            data\n              ? data.map((e) => ({\n                  value: e.value,\n                  text: e.value.replace(\"www.\", \"\"),\n                  key: e.value,\n                }))\n              : []\n          }\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nKeyCloud.propTypes = propTypes;\nexport default React.memo(KeyCloud);\n","import { createClassFromSpec } from \"react-vega\";\n\nexport default createClassFromSpec({\n  spec: {\n    $schema: \"https://vega.github.io/schema/vega/v5.json\",\n    width: 500,\n    height: 500,\n    padding: 0,\n    autosize: {\n      type: \"no\",\n      resize: false,\n    },\n\n    data: [\n      {\n        name: \"tree\",\n        transform: [\n          {\n            type: \"filter\",\n            expr: \"if(selectedDatum === null, datum.name == selectedDatum.name, true)\",\n          },\n          {\n            type: \"stratify\",\n            key: \"name\",\n            parentKey: \"parent\",\n          },\n          {\n            type: \"pack\",\n            field: \"count\",\n            sort: { field: \"count\" },\n            size: [{ signal: \"width\" }, { signal: \"height\" }],\n          },\n\n          {\n            type: \"filter\",\n            expr: \"datum.type != 'root' && datum.type != 'category'\",\n          },\n        ],\n      },\n    ],\n\n    signals: [\n      {\n        name: \"selectedDatum\",\n        value: \"null\",\n        on: [{ events: \"click\", update: \"datum\", force: \"true\" }],\n      },\n    ],\n\n    scales: [\n      {\n        name: \"color\",\n        type: \"ordinal\",\n        domain: { data: \"tree\", field: \"category\" },\n        range: { scheme: \"category20\" },\n      },\n    ],\n\n    marks: [\n      {\n        type: \"symbol\",\n        from: { data: \"tree\" },\n        encode: {\n          enter: {\n            shape: { value: \"circle\" },\n            fill: { scale: \"color\", field: \"category\" },\n            tooltip: { signal: \"datum.name\" },\n          },\n          update: {\n            x: { field: \"x\" },\n            y: { field: \"y\" },\n            size: { signal: \"4 * datum.r * datum.r\" },\n            stroke: { value: \"white\" },\n            strokeWidth: { value: 0.8 },\n          },\n          hover: {\n            stroke: { value: \"white\" },\n            strokeWidth: { value: 2 },\n          },\n        },\n      },\n      {\n        type: \"image\",\n        name: \"images\",\n        from: { data: \"tree\" },\n        encode: {\n          enter: {\n            url: { signal: \"datum.r < 16 ? '' : datum.logo\" },\n            tooltip: { signal: \"datum.name\" },\n          },\n          update: {\n            x: { signal: \"datum.x - min(datum.r, 32) / 2\" },\n            y: { signal: \"datum.y - min(datum.r, 32) / 2\" },\n            width: { signal: \"min(datum.r, 32)\" },\n            height: { signal: \"min(datum.r, 32)\" },\n          },\n          hover: {\n            stroke: { value: \"red\" },\n            strokeWidth: { value: 2 },\n          },\n        },\n      },\n    ],\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport BubbleChartSpec from \"./BubbleChartSpec\";\nimport ConfirmDeleteModal from \"./ConfirmDeleteModal\";\nimport { Card, Button, Image, Dimmer, Loader } from \"semantic-ui-react\";\nimport useDomainInfo from \"components/explore/dashboardData/useDomainInfo\";\n/**\n * Makes a wordcloud for keys, for a given table:field in db\n */\nconst BubbleChart = ({ dashData, field, inSelection, setOutSelection }) => {\n  const [data, setData] = useState({ tree: [] }); // input for vega visualization\n  const [selectedDatum, setSelectedDatum] = useState(null);\n  const [deleteIds, setDeleteIds] = useState([]);\n  const [filteredDatum, setFilteredDatum] = useState(null);\n\n  const domainInfo = useDomainInfo(dashData);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setData(createTreeData(dashData, field, inSelection, domainInfo));\n  }, [dashData, field, domainInfo, inSelection, setLoading]);\n\n  // Vega signal handler\n  const onSelectedDatum = (signal, datum) => {\n    if (datum === null) {\n      // Clicking outside circles will reset filter\n      setFilteredDatum(null);\n      setSelectedDatum(null);\n    } else {\n      if (datum.type === field) {\n        setSelectedDatum(datum);\n      }\n    }\n  };\n\n  // Vega signal handler\n\n  // Popup button handler\n  const filterSelectedDatum = async () => {\n    let selection = await dashData.searchValues([selectedDatum.name], field);\n    setOutSelection(selection);\n    setSelectedDatum(null);\n  };\n\n  // Popup button handler\n  const deleteSelectedDatum = async () => {\n    let selection = await dashData.searchValues([selectedDatum.name], field);\n    console.log(selection);\n    setDeleteIds(selection);\n    setSelectedDatum(null);\n  };\n\n  const signalListeners = {\n    selectedDatum: onSelectedDatum,\n  };\n\n  const popupStyle = {\n    zIndex: 1,\n    position: \"absolute\",\n    left: selectedDatum ? selectedDatum.x : 0,\n    top: selectedDatum ? selectedDatum.y : 0,\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <Dimmer active={loading}>\n        <Loader />\n      </Dimmer>\n      <BubbleChartSpec data={data} signalListeners={signalListeners} actions={false} />\n      {selectedDatum && (\n        <div style={popupStyle}>\n          <Card>\n            <Card.Content>\n              {selectedDatum.logo && <Image floated=\"left\" size=\"mini\" src={selectedDatum.logo} />}\n              <Button\n                basic\n                floated=\"right\"\n                size=\"mini\"\n                icon=\"close\"\n                onClick={() => setSelectedDatum(null)}\n              />\n              <Card.Header>{selectedDatum.name}</Card.Header>\n              <Card.Meta>{`${selectedDatum.count} visits`}</Card.Meta>\n              <Card.Description>\n                <p>{selectedDatum.title && selectedDatum.title}</p>\n                <p>Category: {selectedDatum.category ? selectedDatum.category : \"unknown\"}</p>\n              </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              <div className=\"ui two buttons\">\n                <Button basic color=\"blue\" onClick={filterSelectedDatum}>\n                  Select\n                </Button>\n                <Button basic color=\"red\" onClick={deleteSelectedDatum}>\n                  Delete\n                </Button>\n              </div>\n            </Card.Content>\n          </Card>\n        </div>\n      )}\n      <ConfirmDeleteModal dashData={dashData} deleteIds={deleteIds} setDeleteIds={setDeleteIds} />\n    </div>\n  );\n};\n\nconst logosize = 128;\n\nconst createTreeData = (dashData, field, selection, domainInfo) => {\n  const domains = dashData.count(field, selection);\n  const nodes = [];\n  let categories = {};\n  for (let domain of Object.keys(domains)) {\n    const category =\n      domainInfo?.[domain]?.category || \".\" + domain.split(\".\").slice(-1)[0] || \"other\";\n    let logo = domainInfo?.[domain]?.logo ? domainInfo[domain].logo : `http://${domain}`;\n    logo = `http://t1.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=${logo}&size=${logosize}`;\n\n    if (!categories[category])\n      categories[category] = {\n        type: \"category\",\n        name: category,\n        count: 0,\n        parent: \"root\",\n        category,\n      };\n    categories[category].count++;\n\n    nodes.push({\n      type: field,\n      name: domain,\n      parent: category,\n      count: domains[domain],\n      category,\n      logo,\n    });\n  }\n  categories = Object.values(categories);\n  return { tree: [{ name: \"root\", type: \"root\" }, ...categories, ...nodes] };\n};\n\nexport default React.memo(BubbleChart);\n","import React from \"react\";\nimport DashboardTemplate from \"./dashboards/DashboardTemplate\";\nimport KeyCloud from \"./dashboards/dashboardParts/KeyCloud\";\nimport BubbleChart from \"./dashboards/dashboardParts/BubbleChart\";\n\nconst FIELD = \"domain\";\nconst SEARCHON = [\"url\", \"title\"];\nconst COLUMNS = [\"date\", \"title\", \"url\"];\n\n/**\n * A dashboard for the browsing history data.\n * Note that this component is reached via the react router.\n */\nexport default function BrowsingHistory() {\n  return (\n    <DashboardTemplate\n      dataName=\"Browsing\"\n      searchOn={SEARCHON}\n      columns={COLUMNS}\n      VisComponent={VisComponent}\n      calcStatistics={calcStatistics}\n    />\n  );\n}\n\nconst VisComponent = ({ dashData, inSelection, setOutSelection }) => {\n  if (!dashData) return null;\n  return (\n    <div style={{ width: \"20vw\", height: \"vh\" }}>\n      <BubbleChart\n        dashData={dashData}\n        field={FIELD}\n        inSelection={inSelection}\n        setOutSelection={setOutSelection}\n      />\n    </div>\n  );\n};\n\nconst VisComponent2 = ({ dashData, inSelection, setOutSelection }) => {\n  return (\n    <KeyCloud\n      dashData={dashData}\n      field={FIELD}\n      inSelection={inSelection}\n      nWords={50}\n      setOutSelection={setOutSelection}\n    />\n  );\n};\n\nconst calcStatistics = (dashData, selection) => {\n  if (!dashData) return [];\n  const counts = dashData.count(FIELD, selection);\n\n  const stats = {};\n  stats[\"Total visits\"] = 0;\n  stats[\"Most visited\"] = [\"none\", 0]; // array of [0] key and [1] count\n  stats[\"Unique websites\"] = 0;\n  for (let key of Object.keys(counts)) {\n    stats[\"Total visits\"] += counts[key];\n    stats[\"Unique websites\"]++;\n    if (counts[key] > stats[\"Most visited\"][1]) stats[\"Most visited\"] = [key, counts[key]];\n  }\n\n  return Object.keys(stats).map((label) => ({ label, value: stats[label] }));\n};\n","import React from \"react\";\nimport DashboardTemplate from \"./dashboards/DashboardTemplate\";\nimport KeyCloud from \"./dashboards/dashboardParts/KeyCloud\";\n\nconst FIELD = \"channel\";\nconst SEARCHON = [\"channel\", \"title\"];\nconst COLUMNS = [\"channel\", \"title\", \"date\"];\n\n/**\n * A dashboard for the browsing history data.\n * Note that this component is reached via the react router.\n * When the card on the home page is clicked, it navigates to /Browsing\n */\nexport default function Youtube() {\n  return (\n    <DashboardTemplate\n      dataName=\"Youtube\"\n      searchOn={SEARCHON}\n      columns={COLUMNS}\n      VisComponent={VisComponent}\n      calcStatistics={calcStatistics}\n    />\n  );\n}\n\nconst VisComponent = ({ dashData, inSelection, setOutSelection }) => {\n  return (\n    <KeyCloud\n      dashData={dashData}\n      field={FIELD}\n      inSelection={inSelection}\n      nWords={50}\n      setOutSelection={setOutSelection}\n    />\n  );\n};\n\nconst calcStatistics = (dashData, selection) => {\n  if (!dashData) return [];\n  const counts = dashData.count(FIELD, selection);\n\n  const stats = {};\n  stats[\"Total visits\"] = 0;\n  stats[\"Most visited\"] = [\"none\", 0]; // array of [0] key and [1] count\n  stats[\"Unique websites\"] = 0;\n  for (let key of Object.keys(counts)) {\n    stats[\"Total visits\"] += counts[key];\n    stats[\"Unique websites\"]++;\n    if (counts[key] > stats[\"Most visited\"][1]) stats[\"Most visited\"] = [key, counts[key]];\n  }\n\n  return Object.keys(stats).map((label) => ({ label, value: stats[label] }));\n};\n","import React from \"react\";\nimport DashboardTemplate from \"./dashboards/DashboardTemplate\";\nimport KeyCloud from \"./dashboards/dashboardParts/KeyCloud\";\n\nconst FIELD = \"word\";\nconst SEARCHON = [\"word\"];\nconst COLUMNS = [\"query\", \"date\"];\n\n/**\n * A dashboard for the browsing history data.\n */\nexport default function SearchHistory() {\n  return (\n    <DashboardTemplate\n      dataName=\"Search\"\n      searchOn={SEARCHON}\n      columns={COLUMNS}\n      VisComponent={VisComponent}\n      calcStatistics={calcStatistics}\n    />\n  );\n}\n\nconst VisComponent = ({ dashData, inSelection, setOutSelection }) => {\n  return (\n    <KeyCloud\n      dashData={dashData}\n      field={FIELD}\n      inSelection={inSelection}\n      nWords={50}\n      setOutSelection={setOutSelection}\n    />\n  );\n};\n\nconst calcStatistics = (dashData, selection) => {\n  if (!dashData) return [];\n  const counts = dashData.count(FIELD, selection);\n\n  const stats = {};\n  stats[\"Total visits\"] = 0;\n  stats[\"Most visited\"] = [\"none\", 0]; // array of [0] key and [1] count\n  stats[\"Unique websites\"] = 0;\n  for (let key of Object.keys(counts)) {\n    stats[\"Total visits\"] += counts[key];\n    stats[\"Unique websites\"]++;\n    if (counts[key] > stats[\"Most visited\"][1]) stats[\"Most visited\"] = [key, counts[key]];\n  }\n\n  return Object.keys(stats).map((label) => ({ label, value: stats[label] }));\n};\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport HeaderMenu from \"./components/routing/HeaderMenu\";\nimport \"./App.css\";\n\n// login and authenticated route\nimport Welcome from \"./components/routing/Welcome\";\nimport AuthRoute from \"./components/routing/AuthRoute\";\n\n// Main pages. Use below in items to include in header menu\nimport DataSquare from \"./components/home/DataSquare\";\nimport BrowsingHistory from \"./components/explore/BrowsingHistory\";\nimport YoutubeHistory from \"./components/explore/YoutubeHistory\";\nimport SearchHistory from \"./components/explore/SearchHistory\";\n\n// Change to add new components to the header\n// The first item will be the opening page after login\nconst items = [\n  { label: \"Data square\", path: \"/datasquare\", Component: DataSquare },\n  { label: \"Browsing History\", path: \"/browsing\", Component: BrowsingHistory },\n  { label: \"Search\", path: \"/search\", Component: SearchHistory },\n  { label: \"Youtube\", path: \"/youtube\", Component: YoutubeHistory },\n];\n\nconst App = () => {\n  const createNavigation = (items) => {\n    return items.map((item) => {\n      return <AuthRoute key={item.path} path={item.path} Component={item.Component} />;\n    });\n  };\n\n  return (\n    <div style={{ background: \"#0C1D35\", height: \"100%\" }}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <HeaderMenu items={items}>\n          <Switch>\n            <Route exact path={\"/\"} render={() => <Welcome items={items} />} />\n            {createNavigation(items)}\n          </Switch>\n        </HeaderMenu>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nconst dataStatus = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_DATA_STATUS\":\n      // set whole status array\n      return action.dataStatus;\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  dataStatus,\n});\n\nexport default rootReducer;\n","import \"semantic-ui-css/semantic.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}